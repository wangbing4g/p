diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..466d220
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+/target/
+.classpath
+.project
+/.settings/
diff --git a/pom.xml b/pom.xml
index 9c8d1f8..2ab2119 100644
--- a/pom.xml
+++ b/pom.xml
@@ -117,6 +117,31 @@
 			<version>1.7.6</version>
 		</dependency>
 		
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>1.2.15</version>
+			<exclusions>
+				<exclusion>
+					<groupId>javax.mail</groupId>
+					<artifactId>mail</artifactId>
+				</exclusion>
+				<exclusion>
+					<groupId>javax.jms</groupId>
+					<artifactId>jms</artifactId>
+				</exclusion>
+				<exclusion>
+					<groupId>com.sun.jdmk</groupId>
+					<artifactId>jmxtools</artifactId>
+				</exclusion>
+				<exclusion>
+					<groupId>com.sun.jmx</groupId>
+					<artifactId>jmxri</artifactId>
+				</exclusion>
+			</exclusions>
+			<scope>compile</scope>
+		</dependency>
+		
   </dependencies>
   
   <repositories>
@@ -124,7 +149,7 @@
 		<repository>
 			<id>nexus</id>
 			<name>Team Nexus Repository</name>
-			<url>http://10.0.0.88:8081/nexus/content/groups/public</url> 
+			<url>http://repo.ceair.com:8081/nexus/content/groups/public</url> 
 		</repository>
 		
 	</repositories>
@@ -134,7 +159,7 @@
 		<pluginRepository> 
 			<id>nexus</id>
 			<name>Team Nexus Repository</name>
-			<url>http://10.0.0.88:8081/nexus/content/groups/public</url> 
+			<url>http://repo.ceair.com:8081/nexus/content/groups/public</url> 
 			<snapshots>
 				<enabled>false</enabled>
 			</snapshots>
diff --git a/src/main/java/c/c/p/web/jmx/CCPMBeanInfo.java b/src/main/java/c/c/p/web/jmx/CCPMBeanInfo.java
new file mode 100644
index 0000000..b7a3340
--- /dev/null
+++ b/src/main/java/c/c/p/web/jmx/CCPMBeanInfo.java
@@ -0,0 +1,13 @@
+/**
+ * 
+ */
+package c.c.p.web.jmx;
+
+/**
+ * @author WangBing
+ *
+ */
+public interface CCPMBeanInfo {
+
+    public String getName();
+}
diff --git a/src/main/java/c/c/p/web/jmx/CCPMBeanRegistry.java b/src/main/java/c/c/p/web/jmx/CCPMBeanRegistry.java
new file mode 100644
index 0000000..4733098
--- /dev/null
+++ b/src/main/java/c/c/p/web/jmx/CCPMBeanRegistry.java
@@ -0,0 +1,101 @@
+/**
+ * 
+ */
+package c.c.p.web.jmx;
+
+import java.lang.management.ManagementFactory;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import javax.management.JMException;
+import javax.management.MBeanServer;
+import javax.management.MBeanServerFactory;
+import javax.management.MalformedObjectNameException;
+import javax.management.ObjectName;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * @author WangBing
+ *
+ */
+public final class CCPMBeanRegistry {
+
+    private static Logger LOG = LoggerFactory.getLogger(CCPMBeanRegistry.class);
+
+    private MBeanServer beanServer;
+
+    private static CCPMBeanRegistry instance = new CCPMBeanRegistry();
+
+    private Map<CCPMBeanInfo, String> mapBean2Name = new HashMap<CCPMBeanInfo, String>();
+
+    private final Object LOCK = new Object();
+
+    public static CCPMBeanRegistry getInstance() {
+        return instance;
+    }
+
+    /**
+     * 
+     */
+    private CCPMBeanRegistry() {
+        beanServer = ManagementFactory.getPlatformMBeanServer();
+        if (beanServer == null) {
+            beanServer = MBeanServerFactory.createMBeanServer();
+        }
+    }
+
+    public MBeanServer getPlatformMbeanServer() {
+        return beanServer;
+    }
+
+    public Set<CCPMBeanInfo> getRegisteredBeans() {
+        return new HashSet<CCPMBeanInfo>(mapBean2Name.keySet());
+    }
+
+    public void register(CCPMBeanInfo beanInfo) throws JMException {
+
+        assert beanInfo != null;
+
+        ObjectName oname = getObjectName(beanInfo);
+        
+        LOG.info("Register MBean [{}]",oname);
+        
+        try {
+            synchronized (LOCK) {
+                beanServer.registerMBean(beanInfo, oname);
+                mapBean2Name.put(beanInfo, beanInfo.getName());
+            }
+        } catch (JMException e) {
+            LOG.warn("Failed to register MBean [{}]", beanInfo.getName());
+            throw e;
+        }
+
+    }
+    
+    public void unregister(CCPMBeanInfo beanInfo) throws JMException {
+        
+        assert beanInfo != null;
+        
+        ObjectName oname = getObjectName(beanInfo);
+        LOG.info("unregister MBean [{}]",oname);
+        synchronized (LOCK) {
+            beanServer.unregisterMBean(oname);
+            mapBean2Name.remove(beanInfo);
+        }
+    }
+
+    /**
+     * @param beanInfo
+     * @return
+     * @throws MalformedObjectNameException
+     */
+    private ObjectName getObjectName(CCPMBeanInfo beanInfo) throws MalformedObjectNameException {
+        ObjectName oname = new ObjectName("c.c.p.domain", "name", beanInfo.getName());
+        return oname;
+    }
+
+}
diff --git a/src/main/java/c/c/p/web/logger/manage/ManagedLog4j.java b/src/main/java/c/c/p/web/logger/manage/ManagedLog4j.java
new file mode 100644
index 0000000..6875a72
--- /dev/null
+++ b/src/main/java/c/c/p/web/logger/manage/ManagedLog4j.java
@@ -0,0 +1,57 @@
+/**
+ * 
+ */
+package c.c.p.web.logger.manage;
+
+import java.util.Enumeration;
+
+import javax.management.JMException;
+import javax.management.MBeanServer;
+import javax.management.ObjectName;
+
+import org.apache.log4j.LogManager;
+import org.apache.log4j.Logger;
+import org.apache.log4j.jmx.HierarchyDynamicMBean;
+import org.apache.log4j.spi.LoggerRepository;
+
+import c.c.p.web.jmx.CCPMBeanRegistry;
+
+
+/**
+ * @author WangBing
+ *
+ */
+public class ManagedLog4j {
+    
+    public static void registerLog4jMbeans() throws JMException {
+        
+        if (Boolean.getBoolean("jmx.log4j.disable") == true) {
+            return;
+        }
+        
+        MBeanServer beanServer = CCPMBeanRegistry.getInstance().getPlatformMbeanServer();
+        
+     // Create and Register the top level Log4J MBean
+        HierarchyDynamicMBean hdm = new HierarchyDynamicMBean();
+
+        ObjectName mbo = new ObjectName("log4j:hiearchy=default");
+        beanServer.registerMBean(hdm, mbo);
+
+        // Add the root logger to the Hierarchy MBean
+        Logger rootLogger = Logger.getRootLogger();
+        hdm.addLoggerMBean(rootLogger.getName());
+
+        // Get each logger from the Log4J Repository and add it to
+        // the Hierarchy MBean created above.
+        LoggerRepository r = LogManager.getLoggerRepository();
+        Enumeration enumer = r.getCurrentLoggers();
+        Logger logger = null;
+
+        while (enumer.hasMoreElements()) {
+           logger = (Logger) enumer.nextElement();
+           hdm.addLoggerMBean(logger.getName());
+        }
+    }
+    
+
+}
